// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1 (interfaces: AttesterServiceClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prysmaticlabs/prysm/proto/beacon/p2p/v1"
	v10 "github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1"
	grpc "google.golang.org/grpc"
)

// MockAttesterServiceClient is a mock of AttesterServiceClient interface
type MockAttesterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAttesterServiceClientMockRecorder
}

// MockAttesterServiceClientMockRecorder is the mock recorder for MockAttesterServiceClient
type MockAttesterServiceClientMockRecorder struct {
	mock *MockAttesterServiceClient
}

// NewMockAttesterServiceClient creates a new mock instance
func NewMockAttesterServiceClient(ctrl *gomock.Controller) *MockAttesterServiceClient {
	mock := &MockAttesterServiceClient{ctrl: ctrl}
	mock.recorder = &MockAttesterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAttesterServiceClient) EXPECT() *MockAttesterServiceClientMockRecorder {
	return m.recorder
}

// AttestHead mocks base method
func (m *MockAttesterServiceClient) AttestHead(arg0 context.Context, arg1 *v1.Attestation, arg2 ...grpc.CallOption) (*v10.AttestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttestHead", varargs...)
	ret0, _ := ret[0].(*v10.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestHead indicates an expected call of AttestHead
func (mr *MockAttesterServiceClientMockRecorder) AttestHead(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestHead", reflect.TypeOf((*MockAttesterServiceClient)(nil).AttestHead), varargs...)
}

// AttestationDataAtSlot mocks base method
func (m *MockAttesterServiceClient) AttestationDataAtSlot(arg0 context.Context, arg1 *v10.AttestationDataRequest, arg2 ...grpc.CallOption) (*v10.AttestationDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttestationDataAtSlot", varargs...)
	ret0, _ := ret[0].(*v10.AttestationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestationDataAtSlot indicates an expected call of AttestationDataAtSlot
func (mr *MockAttesterServiceClientMockRecorder) AttestationDataAtSlot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestationDataAtSlot", reflect.TypeOf((*MockAttesterServiceClient)(nil).AttestationDataAtSlot), varargs...)
}
